import { formsApi } from '@/lib/api/index';
import React, { useCallback, useEffect, useState } from 'react';
import { FormSubmission } from './types';

interface FormSubmissionsManagerProps {
    widgetId: number;
    siteId: number;
}

export const FormSubmissionsManager: React.FC<FormSubmissionsManagerProps> = ({
    widgetId,
    siteId,
}) => {
    const [submissions, setSubmissions] = useState<FormSubmission[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string>('');
    const [selectedSubmission, setSelectedSubmission] =
        useState<FormSubmission | null>(null);
    const [filters, setFilters] = useState({
        status: 'all',
        dateFrom: '',
        dateTo: '',
        search: '',
    });
    const [pagination, setPagination] = useState({
        currentPage: 1,
        totalPages: 1,
        perPage: 20,
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫
    const loadSubmissions = useCallback(async () => {
        try {
            setLoading(true);
            const response = await formsApi.getFormSubmissions(
                siteId,
                widgetId,
                {
                    page: pagination.currentPage,
                    per_page: pagination.perPage,
                    search: filters.search,
                },
            );

            setSubmissions(response.data || []);
            setPagination((prev) => ({
                ...prev,
                totalPages: response.last_page || 1,
            }));
        } catch (err) {
            setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        } finally {
            setLoading(false);
        }
    }, [widgetId, siteId, pagination.currentPage, pagination.perPage, filters]);

    useEffect(() => {
        loadSubmissions();
    }, [loadSubmissions]);

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const handleDeleteSubmission = useCallback(
        async (submissionId: number) => {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ—Ç–ø—Ä–∞–≤–∫—É?')) {
                return;
            }

            try {
                await formsApi.deleteFormSubmission(
                    siteId,
                    widgetId,
                    submissionId,
                );

                setSubmissions((prev) =>
                    prev.filter((s) => s.id !== submissionId),
                );
                if (selectedSubmission?.id === submissionId) {
                    setSelectedSubmission(null);
                }
            } catch (err) {
                setError(
                    err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è',
                );
            }
        },
        [widgetId, siteId, selectedSubmission],
    );

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
    const handleExportCSV = useCallback(() => {
        if (submissions.length === 0) return;

        const headers = ['ID', '–î–∞—Ç–∞', 'IP –∞–¥—Ä–µ—Å', '–°—Ç–∞—Ç—É—Å'];
        const dataKeys = new Set<string>();

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        submissions.forEach((submission) => {
            Object.keys(submission.data || {}).forEach((key) => {
                dataKeys.add(key);
            });
        });

        const allHeaders = [...headers, ...Array.from(dataKeys)];
        const csvContent = [
            allHeaders.join(','),
            ...submissions.map((submission) =>
                [
                    submission.id,
                    submission.created_at,
                    submission.ip_address || '',
                    submission.status,
                    ...Array.from(dataKeys).map((key) => {
                        const value = submission.data?.[key];
                        if (Array.isArray(value)) {
                            return `"${value.join('; ')}"`;
                        }
                        return `"${value || ''}"`;
                    }),
                ].join(','),
            ),
        ].join('\n');

        const blob = new Blob([csvContent], {
            type: 'text/csv;charset=utf-8;',
        });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `form-submissions-${new Date().toISOString().split('T')[0]}.csv`;
        link.click();
    }, [submissions]);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    const handleFilterChange = useCallback((field: string, value: string) => {
        setFilters((prev) => ({ ...prev, [field]: value }));
        setPagination((prev) => ({ ...prev, currentPage: 1 }));
    }, []);

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const handlePageChange = useCallback((page: number) => {
        setPagination((prev) => ({ ...prev, currentPage: page }));
    }, []);

    const getStatusBadge = (status: string) => {
        const statusConfig = {
            pending: { label: '–û–∂–∏–¥–∞–µ—Ç', className: 'status-pending' },
            processed: { label: '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', className: 'status-processed' },
            failed: { label: '–û—à–∏–±–∫–∞', className: 'status-failed' },
        };

        const config =
            statusConfig[status as keyof typeof statusConfig] ||
            statusConfig.pending;

        return (
            <span className={`status-badge ${config.className}`}>
                {config.label}
            </span>
        );
    };

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleString('ru-RU');
    };

    if (loading) {
        return (
            <div className="form-submissions-manager">
                <div className="form-submissions-manager__loading">
                    <div className="spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="form-submissions-manager">
            <div className="form-submissions-manager__header">
                <h3>–û—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã</h3>
                <div className="form-submissions-manager__actions">
                    <button
                        type="button"
                        onClick={handleExportCSV}
                        className="form-submissions-manager__export-btn"
                        disabled={submissions.length === 0}
                    >
                        üìä –≠–∫—Å–ø–æ—Ä—Ç CSV
                    </button>
                    <button
                        type="button"
                        onClick={loadSubmissions}
                        className="form-submissions-manager__refresh-btn"
                    >
                        üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                </div>
            </div>

            {error && (
                <div className="form-submissions-manager__error">{error}</div>
            )}

            {/* –§–∏–ª—å—Ç—Ä—ã */}
            <div className="form-submissions-manager__filters">
                <div className="form-submissions-manager__filter-group">
                    <label>–°—Ç–∞—Ç—É—Å</label>
                    <select
                        value={filters.status}
                        onChange={(e) =>
                            handleFilterChange('status', e.target.value)
                        }
                    >
                        <option value="all">–í—Å–µ</option>
                        <option value="pending">–û–∂–∏–¥–∞–µ—Ç</option>
                        <option value="processed">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</option>
                        <option value="failed">–û—à–∏–±–∫–∞</option>
                    </select>
                </div>

                <div className="form-submissions-manager__filter-group">
                    <label>–î–∞—Ç–∞ –æ—Ç</label>
                    <input
                        type="date"
                        value={filters.dateFrom}
                        onChange={(e) =>
                            handleFilterChange('dateFrom', e.target.value)
                        }
                    />
                </div>

                <div className="form-submissions-manager__filter-group">
                    <label>–î–∞—Ç–∞ –¥–æ</label>
                    <input
                        type="date"
                        value={filters.dateTo}
                        onChange={(e) =>
                            handleFilterChange('dateTo', e.target.value)
                        }
                    />
                </div>

                <div className="form-submissions-manager__filter-group">
                    <label>–ü–æ–∏—Å–∫</label>
                    <input
                        type="text"
                        placeholder="–ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º..."
                        value={filters.search}
                        onChange={(e) =>
                            handleFilterChange('search', e.target.value)
                        }
                    />
                </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–æ–∫ */}
            <div className="form-submissions-manager__content">
                <div className="form-submissions-manager__list">
                    {submissions.length === 0 ? (
                        <div className="form-submissions-manager__empty">
                            <p>–û—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        </div>
                    ) : (
                        <div className="form-submissions-manager__table">
                            <div className="form-submissions-manager__table-header">
                                <div>ID</div>
                                <div>–î–∞—Ç–∞</div>
                                <div>IP –∞–¥—Ä–µ—Å</div>
                                <div>–°—Ç–∞—Ç—É—Å</div>
                                <div>–î–µ–π—Å—Ç–≤–∏—è</div>
                            </div>
                            {submissions.map((submission) => (
                                <div
                                    key={submission.id}
                                    className={`form-submissions-manager__table-row ${
                                        selectedSubmission?.id === submission.id
                                            ? 'selected'
                                            : ''
                                    }`}
                                    onClick={() =>
                                        setSelectedSubmission(submission)
                                    }
                                >
                                    <div>#{submission.id}</div>
                                    <div>
                                        {formatDate(
                                            submission.created_at || '',
                                        )}
                                    </div>
                                    <div>{submission.ip_address || '-'}</div>
                                    <div>
                                        {getStatusBadge(submission.status)}
                                    </div>
                                    <div className="form-submissions-manager__actions">
                                        <button
                                            type="button"
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                setSelectedSubmission(
                                                    submission,
                                                );
                                            }}
                                            title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
                                        >
                                            üëÅÔ∏è
                                        </button>
                                        <button
                                            type="button"
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                handleDeleteSubmission(
                                                    submission.id!,
                                                );
                                            }}
                                            title="–£–¥–∞–ª–∏—Ç—å"
                                        >
                                            üóëÔ∏è
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                {/* –î–µ—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                {selectedSubmission && (
                    <div className="form-submissions-manager__details">
                        <div className="form-submissions-manager__details-header">
                            <h4>–û—Ç–ø—Ä–∞–≤–∫–∞ #{selectedSubmission.id}</h4>
                            <button
                                type="button"
                                onClick={() => setSelectedSubmission(null)}
                                className="form-submissions-manager__close-btn"
                            >
                                ‚úï
                            </button>
                        </div>

                        <div className="form-submissions-manager__details-content">
                            <div className="form-submissions-manager__meta">
                                <div className="form-submissions-manager__meta-item">
                                    <strong>–î–∞—Ç–∞:</strong>{' '}
                                    {formatDate(
                                        selectedSubmission.created_at || '',
                                    )}
                                </div>
                                <div className="form-submissions-manager__meta-item">
                                    <strong>IP –∞–¥—Ä–µ—Å:</strong>{' '}
                                    {selectedSubmission.ip_address ||
                                        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                </div>
                                <div className="form-submissions-manager__meta-item">
                                    <strong>–°—Ç–∞—Ç—É—Å:</strong>{' '}
                                    {getStatusBadge(selectedSubmission.status)}
                                </div>
                                {selectedSubmission.user_agent && (
                                    <div className="form-submissions-manager__meta-item">
                                        <strong>User Agent:</strong>{' '}
                                        {selectedSubmission.user_agent}
                                    </div>
                                )}
                                {selectedSubmission.referer && (
                                    <div className="form-submissions-manager__meta-item">
                                        <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong>{' '}
                                        {selectedSubmission.referer}
                                    </div>
                                )}
                            </div>

                            <div className="form-submissions-manager__data">
                                <h5>–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã</h5>
                                {selectedSubmission.data &&
                                Object.keys(selectedSubmission.data).length >
                                    0 ? (
                                    <div className="form-submissions-manager__data-grid">
                                        {Object.entries(
                                            selectedSubmission.data,
                                        ).map(([key, value]) => (
                                            <div
                                                key={key}
                                                className="form-submissions-manager__data-item"
                                            >
                                                <strong>{key}:</strong>
                                                <span>
                                                    {Array.isArray(value)
                                                        ? value.join(', ')
                                                        : String(value || '')}
                                                </span>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <p>–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
                                )}
                            </div>

                            {selectedSubmission.error_message && (
                                <div className="form-submissions-manager__error-details">
                                    <h5>–û—à–∏–±–∫–∞</h5>
                                    <p>{selectedSubmission.error_message}</p>
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>

            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            {pagination.totalPages > 1 && (
                <div className="form-submissions-manager__pagination">
                    <button
                        type="button"
                        onClick={() =>
                            handlePageChange(pagination.currentPage - 1)
                        }
                        disabled={pagination.currentPage === 1}
                    >
                        ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                    </button>

                    <span className="form-submissions-manager__pagination-info">
                        –°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.currentPage} –∏–∑{' '}
                        {pagination.totalPages}
                    </span>

                    <button
                        type="button"
                        onClick={() =>
                            handlePageChange(pagination.currentPage + 1)
                        }
                        disabled={
                            pagination.currentPage === pagination.totalPages
                        }
                    >
                        –°–ª–µ–¥—É—é—â–∞—è ‚Üí
                    </button>
                </div>
            )}
        </div>
    );
};
